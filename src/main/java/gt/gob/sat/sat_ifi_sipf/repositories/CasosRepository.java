/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gt.gob.sat.sat_ifi_sipf.repositories;

import gt.gob.sat.sat_ifi_sipf.models.SipfCasos;
import gt.gob.sat.sat_ifi_sipf.projections.AsignacionCasosProjection;
import gt.gob.sat.sat_ifi_sipf.projections.CarteraAllCasesProjection;
import gt.gob.sat.sat_ifi_sipf.projections.CarteraCasosProjection;
import gt.gob.sat.sat_ifi_sipf.projections.CasoProjection;
import gt.gob.sat.sat_ifi_sipf.projections.CasosAlcanceProjection;
import gt.gob.sat.sat_ifi_sipf.projections.CasosProjection;
import gt.gob.sat.sat_ifi_sipf.projections.DetailWalletAppoint;
import gt.gob.sat.sat_ifi_sipf.projections.ListaCasosProjection;
import gt.gob.sat.sat_ifi_sipf.projections.ProcesosMasivosProjections;
import gt.gob.sat.sat_ifi_sipf.projections.ResponsableCasosProjection;
import gt.gob.sat.sat_ifi_sipf.projections.WalletAppointments;
import java.util.List;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;

/**
 *
 * @author crramosl
 */
public interface CasosRepository extends CrudRepository<SipfCasos, Integer> {

    @Override
    List<SipfCasos> findAll();

    @Query(value = "select * from sat_ifi_sipf.sipf_casos sc where sc.id_caso =:idCaso", nativeQuery = true)
    SipfCasos casesId(@Param("idCaso") Integer idCaso);

    @Query(value = "select\n"
            + "	 id_caso as idCaso,\n"
            + "	 nit_contribuyente  as nitContribuyente,\n"
            + "	 id_proceso  as processId,\n"
            + "	 id_impuesto as idImpuesto\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_casos\n"
            + "where\n"
            + " id_estado = 177\n"
            + "	and id_impuesto =:idImpuesto\n"
            + "	and id_gerencia =:idGerencia\n"
            + "limit :cantidad", nativeQuery = true)
    List<AsignacionCasosProjection> assignmentCases(
            @Param("cantidad") Integer cantidad,
            @Param("idImpuesto") Integer idImpuesto,
            @Param("idGerencia") Integer idGerencia);

    @Query(value = "select\n"
            + "	t1.nit_contribuyente as nitContribuyente,\n"
            + "	coalesce ( (\n"
            + "	select\n"
            + "		rcj.razon_social as contribuyente\n"
            + "	from\n"
            + "		sat_rtu.sat_rtu.rtu_contrib_juridico rcj\n"
            + "	where\n"
            + "		rcj.nit = t1.nit_contribuyente),\n"
            + "	(\n"
            + "	select\n"
            + "		concat_ws(' ', rci.primer_nombre, rci.segundo_nombre, rci.tercer_nombre, rci.primer_apellido, rci.segundo_apellido, 'DE ' || rci.apellido_casada) as contribuyente\n"
            + "	from\n"
            + "		sat_rtu.sat_rtu.rtu_contrib_individual rci\n"
            + "	where\n"
            + "		rci.nit = t1.nit_contribuyente) ) as nombreCaso,\n"
            + "	t1.monto_recaudado as montoRecaudado,\n"
            + "	t1.periodo_revision_inicio as periodoInicio,\n"
            + "	t1.periodo_revision_fin as periodoFin,\n"
            + "	cast(( select array_to_json(array_agg(row_to_json(so))) from ( select scd.nombre nombreImpuesto, sic.id_impuesto idImpuesto from sat_ifi_sipf.sipf_casos sc inner join sat_ifi_sipf.sipf_impuesto_caso sic on sic.id_caso = sc.id_caso inner join sat_ifi_sipf.sipf_cat_dato scd on scd.codigo = sic.id_impuesto where sc.id_caso = t1.id_caso ) so ) as varchar) as impuestos,\n"
            + "	t1.id_caso as idCaso,\n"
            + "	t5.nit_colaborador as nitProfesionalResponsable,\n"
            + "	t1.id_origen as idOrigen,\n"
            + "	t6.nombre as nombreOrigen,\n"
            + "	t3.nombre as nombreEstado,\n"
            + "	t1.id_estado as idEstado,\n"
            + "	t1.id_proceso as processId,\n"
            + "	t1.usuario_modifica as usuarioElaboro,\n"
            + "	t1.id_programa as noPrograma,\n"
            + " sdc.tipo_caso as tipoCaso\n,"
            + "	cast(( select string_agg(scd.nombre , ', ') from sat_ifi_sipf.sipf_casos sc inner join sat_ifi_sipf.sipf_impuesto_caso sic on sic.id_caso = sc.id_caso inner join sat_ifi_sipf.sipf_cat_dato scd on scd.codigo = sic.id_impuesto where sc.id_caso = t1.id_caso ) as varchar) as nombreImpuesto\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_casos as t1\n"
            + "inner join sat_ifi_sipf.sipf_cat_dato as t3 on\n"
            + "	t1.id_estado = t3.codigo\n"
            + "inner join sat_ifi_sipf.sipf_asignacion_casos as t5 on\n"
            + "	t5.id_caso = t1.id_caso\n"
            + "left join sat_ifi_sipf.sipf_cat_dato as t6 on\n"
            + "	t6.codigo = t1.id_origen\n"
            + "inner join sat_ifi_sipf.sipf_detalle_caso as sdc on\n"
            + "	sdc.id_caso =t1.id_caso \n"
            + "where\n"
            + "	t5.nit_colaborador = :nitProfesional\n"
            + "	and t1.id_estado in (\n"
            + "	select\n"
            + "		distinct id_estado\n"
            + "	from\n"
            + "		sat_ifi_sipf.sipf_perfil_estado_tabla spet\n"
            + "	inner join sat_ifi_sipf.sipf_perfil sp on\n"
            + "		sp.id_perfil = spet.id_perfil\n"
            + "	inner join sat_ifi_sipf.sipf_colaborador_perfil scp on\n"
            + "		scp.id_perfil = sp.id_perfil\n"
            + "	where\n"
            + "		scp.nit = t5.nit_colaborador )\n"
            + "and sdc.tipo_caso=969 order by t1.id_caso desc", nativeQuery = true)
    List<CarteraCasosProjection> walletCase(@Param("nitProfesional") String nitProfesional);

    /**
     * and sdc.tipo_caso=969 QUERY QUE OBTIENE LOS CASOS DE TIPO PUNTOS FIJOS
     * PARA GENERAR ALCANCE.
     *
     * @return
     */
    @Query(value = "select \n"
            + "sac.id_caso as idCaso,\n"
            + "scd2.nombre as nombreEstado  ,\n"
            + "scd3.nombre as nombreGerencia  ,\n"
            + "sc.nit_contribuyente as NitContribuyente,\n"
            + "sdc.tipo_caso \n"
            + "from sat_ifi_sipf.sipf_asignacion_casos sac \n"
            + "inner join sat_ifi_sipf.sipf_casos sc on\n"
            + "sc.id_caso = sac.id_caso \n"
            + "inner join sat_ifi_sipf.sipf_cat_dato scd2 on\n"
            + "scd2.codigo = sc.id_estado \n"
            + "inner join sat_ifi_sipf.sipf_cat_dato scd3 on\n"
            + "scd3.codigo = sc.id_gerencia \n"
            + "inner join sat_ifi_sipf.sipf_detalle_caso sdc on\n"
            + "sdc.id_caso  = sac.id_caso \n"
            + "where sac.nit_colaborador= :nit and sdc.tipo_caso = 971 and (sc.id_estado = 15 or sc.id_estado = 16 or sc.id_estado=181)", nativeQuery = true)
    List<CasosAlcanceProjection> getCasesForScopesFixedPoints(@Param("nit") String nit);

    /**
     * QUERY QUE OBTIENE LOS CASOS DE GABINETE PARA GENERAR ALCANCE
     *
     * @param nit
     * @return
     */
    @Query(value = "select \n"
            + "sac.id_caso as idCaso,\n"
            + "scd2.nombre as nombreEstado  ,\n"
            + "scd3.nombre as nombreGerencia  ,\n"
            + "sc.nit_contribuyente as NitContribuyente,\n"
            + "sdc.tipo_caso \n"
            + "from sat_ifi_sipf.sipf_asignacion_casos sac \n"
            + "inner join sat_ifi_sipf.sipf_casos sc on\n"
            + "sc.id_caso = sac.id_caso \n"
            + "inner join sat_ifi_sipf.sipf_cat_dato scd2 on\n"
            + "scd2.codigo = sc.id_estado \n"
            + "inner join sat_ifi_sipf.sipf_cat_dato scd3 on\n"
            + "scd3.codigo = sc.id_gerencia \n"
            + "inner join sat_ifi_sipf.sipf_detalle_caso sdc on\n"
            + "sdc.id_caso  = sac.id_caso \n"
            + "where sac.nit_colaborador= :nit and sdc.tipo_caso = 972 and (sc.id_estado = 15 or sc.id_estado = 16 or sc.id_estado=181)", nativeQuery = true)
    List<CasosAlcanceProjection> getCasesForScopesFiscal(@Param("nit") String nit);

    @Query(value = "select\n"
            + "	cs.id_caso as idCaso,\n"
            + " t8.id_alcance as idAlcance,\n"
            + "	cs.id_insumo as idInsumo,\n"
            + "	cs.id_estado as idEstado,\n"
            + "	cs.id_origen as idOrigen,\n"
            + "	cs.id_gerencia as idGerencia,\n"
            + "	cs.id_proceso as idProceso,\n"
            + "	t6.nombre_insumo as nombreCaso,\n"
            + "	t6.descripcion as descripcion,\n"
            + "	cs.monto_recaudado as montoRecaudado,\n"
            + "	cs.id_programa as idPrograma,\n"
            + "	cs.id_departamento as idTipoAlcance,\n"
            + "	cs.correlativo_aprobacion as correlativoAprobacion,\n"
            + "	cs.usuario_modifica as usuarioModifica,\n"
            + "	cs.fecha_modifica as fechaModifica,\n"
            + "	cs.ip_modifica as ipModifica,\n"
            + "	cs.periodo_revision_inicio as periodoRevisionInicio,\n"
            + "	cs.periodo_revision_fin as periodoRevisionFin,\n"
            + "	cs.nit_contribuyente as nitContribuyente,\n"
            + "	cd.id_entidad_solicitante as idEntidadSolicitante,\n"
            + "	cd.id_tipo_solicitud as idTipoSolicitud,\n"
            + "	cd.nombre_cuenta_auditar as nombreCuentaAuditar,\n"
            + "	cd.nit_contribuyente_cruce as nitContribuyenteCruce,\n"
            + "	cd.numero_factura_cruce as numeroFacturaCruce,\n"
            + "	cd.serie_factura_cruce as serieFacturaCruce,\n"
            + "	cd.fecha_factura_cruce as fechaFacturaCruce,\n"
            + "	cd.monto_factura_cruce as montoFacturaCruce,\n"
            + "	cd.fecha_solicitud as fechaSolicitud,\n"
            + "	cd.fecha_documento as fechaDocumento,\n"
            + "	cd.numero_documento as numeroDocumento,\n"
            + "	cd.plazo_entrega as plazoEntrega,\n"
            + "	cd.nombre_contacto as nombreContacto,\n"
            + "	cd.telefono_contacto as telefonoContacto,\n"
            + "	cd.correo_contacto as correoContacto,\n"
            + "	cd.detalle_entidad_solicitante as detalleEntidadSolicitante,\n"
            + "	cm.objetivo_caso_masiva as objetivoCasoMasiva,\n"
            + "	cm.territorio_masivo as territorioMasivo,\n"
            + "	ac.nit_colaborador as nitColaborador,\n"
            + "	sc2.nombres nombreColaborador,\n"
            + "	cm.id_version_alcance as idVersionAlcance,\n"
            + "	t2.nombre as nombreGerencia,\n"
            + "	t5.nombre as nombreEstado,\n"
            + "	cast((\n"
            + "	select array_to_json(array_agg(row_to_json(so))) from \n"
            + "	(\n"
            + "	select scd.nombre nombreImpuesto,\n"
            + "	sic.id_impuesto idImpuesto\n"
            + "	from sat_ifi_sipf.sipf_casos sc \n"
            + "	inner join sat_ifi_sipf.sipf_impuesto_caso sic\n"
            + "	on sic.id_caso = sc.id_caso \n"
            + "	inner join sat_ifi_sipf.sipf_cat_dato scd \n"
            + "	on scd.codigo = sic.id_impuesto \n"
            + "	where sc.id_caso = cs.id_caso\n"
            + "	)\n"
            + "	so\n"
            + " ) as varchar) as impuestos,\n"
            + "   ( select  sdc.login_profesional\n"
            + "   	from sat_ifi_sipf.sipf_casos a\n"
            + "   	inner join sat_ifi_sipf.sipf_detalle_caso sdc on sdc.id_caso = a.id_caso\n"
            + "   	where a.id_caso = cs.id_caso) as loginProfesional,"
            + "	t3.nombre as nombreDepartamento,\n"
            + "	t7.nombre as nombrePrograma\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_casos as cs\n"
            + "left join sat_ifi_sipf.sipf_casos_dependencias as cd on\n"
            + "	cs.id_caso = cd.id_caso\n"
            + "left join sat_ifi_sipf.sipf_casos_masivos as cm on\n"
            + "	cm.id_caso = cs.id_caso\n"
            + "left join sat_ifi_sipf.sipf_asignacion_casos as ac on\n"
            + "	ac.id_caso = cs.id_caso\n"
            + "	and ac.id_estado = 15\n"
            + "left join sat_ifi_sipf.sipf_colaborador sc2 on sc2.nit = ac.nit_colaborador 	\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t2 on\n"
            + "	t2.codigo = cs.id_gerencia\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 on\n"
            + "	t3.codigo = cs.id_departamento\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t5 on\n"
            + "	t5.codigo = cs.id_estado\n"
            + "join sat_ifi_sipf.sipf_insumo as t6 on\n"
            + "	t6.id_insumo = cs.id_insumo\n"
            + "left join sat_ifi_sipf.sipf_programa_fiscales as t7 on\n"
            + "	t7.id_programa = cs.id_programa\n"
            + "left join sat_ifi_sipf.sipf_detalle_caso as t8 on\n"
            + "t8.id_caso=cs.id_caso\n"
            + "where\n"
            + "	cs.id_caso = :idCaso", nativeQuery = true)
    CasosProjection findByIdCase(@Param("idCaso") Integer idCaso);

    List<SipfCasos> findByidInsumo(@Param("idInsumo") Integer idInsumo);

    List<SipfCasos> findByidInsumoAndIdEstado(Integer idInsumo, Integer IdEstado);

    //@Query(value = "select p from SipfCasos p ")
    List<SipfCasos> findByIdInsumo(Integer pIdInput, Pageable pagina);

    List<SipfCasos> findByIdInsumoAndIdEstado(Integer pIdInput, Integer idEstado, Pageable pagina);

    @Query(value = "select\n"
            + "	t1.id_caso as idCaso,\n"
            + "	t1.nit_contribuyente as nitContribuyente,\n"
            + "	t1.id_gerencia as idGerencia,\n"
            + "	t2.nombre as nombreGerencia,\n"
            + "	t1.id_estado as idEstado,\n"
            + "	t5.nombre as nombreEstado,\n"
            + "	t1.monto_recaudado as montoRecaudado,\n"
            + "	t1.id_departamento as idTipoAlcance,\n"
            + "	t3.nombre as nombreDepartamento,\n"
            + "	cast((\n"
            + "	select array_to_json(array_agg(row_to_json(so))) from \n"
            + "	(\n"
            + "	select scd.nombre nombreImpuesto,\n"
            + "	sic.id_impuesto idImpuesto\n"
            + "	from sat_ifi_sipf.sipf_casos sc \n"
            + "	inner join sat_ifi_sipf.sipf_impuesto_caso sic\n"
            + "	on sic.id_caso = sc.id_caso \n"
            + "	inner join sat_ifi_sipf.sipf_cat_dato scd \n"
            + "	on scd.codigo = sic.id_impuesto \n"
            + "	where sc.id_caso = t1.id_caso\n"
            + "	)\n"
            + "	so\n"
            + " 	) as varchar) as impuestos,\n"
            + "	t1.periodo_revision_inicio as periodoRevisionInicio,\n"
            + "	t1.periodo_revision_fin as periodoRevisionFin,\n"
            + "	coalesce(\n"
            + "    (select rci.primer_nombre \n"
            + "    		|| ' ' \n"
            + "    		|| rci.segundo_nombre \n"
            + "    		|| coalesce(' ' || rci.tercer_nombre , '') \n"
            + "    		|| ' ' \n"
            + "    		|| rci.primer_apellido \n"
            + "    		|| ' ' \n"
            + "    		|| rci.segundo_apellido \n"
            + "    		|| coalesce(' DE ' || rci.apellido_casada , '')           \n"
            + "        from sat_rtu.sat_rtu.rtu_contrib_individual rci\n"
            + "        where rci.nit = t1.nit_contribuyente)\n"
            + "       ,\n"
            + "     ( select rcj.razon_social\n"
            + "     from sat_rtu.sat_rtu.rtu_contrib_juridico rcj \n"
            + "     where rcj.nit = t1.nit_contribuyente)\n"
            + "     ) as nombreContribuyente,\n"
            + "	sdc.requiere_documentacion as requiereDocumentacion \n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_casos as t1\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t2 on\n"
            + "	t2.codigo = t1.id_gerencia\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 on\n"
            + "	t3.codigo = t1.id_departamento\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t5 on\n"
            + "	t5.codigo = t1.id_estado\n"
            + "inner join sat_ifi_sipf.sipf_detalle_caso sdc on\n"
            + "	sdc.id_caso = t1.id_caso\n"
            + "where\n"
            + "	t1.id_estado =:pIdStatur\n"
            + "	and t1.id_insumo =:pIdInput ", nativeQuery = true)
    List<CasoProjection> findByIdInsumoAndIdEstado(@Param("pIdInput") Integer pIdInput,
            @Param("pIdStatur") Integer pIdStatur);

    @Query(value = "select\n"
            + "	t1.id_caso as idCaso,\n"
            + "	t1.nit_contribuyente as nitContribuyente,\n"
            + "	t1.id_gerencia as idGerencia,\n"
            + "	t2.nombre as nombreGerencia,\n"
            + "	t1.id_estado as idEstado,\n"
            + "	t1.id_insumo as idInsumo,\n"
            + "	t5.nombre as nombreEstado,\n"
            + "	t1.monto_recaudado as montoRecaudado,\n"
            + "	t1.id_departamento as idTipoAlcance,\n"
            + "	t3.nombre as nombreDepartamento,\n"
            + "	cast((\n"
            + "	select array_to_json(array_agg(row_to_json(so))) from \n"
            + "	(\n"
            + "	select scd.nombre nombreImpuesto,\n"
            + "	sic.id_impuesto idImpuesto\n"
            + "	from sat_ifi_sipf.sipf_casos sc \n"
            + "	inner join sat_ifi_sipf.sipf_impuesto_caso sic\n"
            + "	on sic.id_caso = sc.id_caso \n"
            + "	inner join sat_ifi_sipf.sipf_cat_dato scd \n"
            + "	on scd.codigo = sic.id_impuesto \n"
            + "	where sc.id_caso = t1.id_caso\n"
            + "	)\n"
            + "	so\n"
            + " ) as varchar) as impuesto,\n"
            + "	t1.periodo_revision_inicio as periodoRevisionInicio,\n"
            + "	t1.periodo_revision_fin as periodoRevisionFin,\n"
            + "	t6.nombre_insumo as nombreInsumo,\n"
            + " coalesce(\n"
            + "    (select rci.primer_nombre \n"
            + "    		|| ' ' \n"
            + "    		|| rci.segundo_nombre \n"
            + "    		|| coalesce(' ' || rci.tercer_nombre , '') \n"
            + "    		|| ' ' \n"
            + "    		|| rci.primer_apellido \n"
            + "    		|| ' ' \n"
            + "    		|| rci.segundo_apellido \n"
            + "    		|| coalesce(' DE ' || rci.apellido_casada , '')           \n"
            + "        from sat_rtu.sat_rtu.rtu_contrib_individual rci\n"
            + "        where rci.nit = t1.nit_contribuyente)\n"
            + "       ,\n"
            + "     ( select rcj.razon_social\n"
            + "     from sat_rtu.sat_rtu.rtu_contrib_juridico rcj \n"
            + "     where rcj.nit = t1.nit_contribuyente)\n"
            + "     ) as nombreContribuyente\n"
            + "	from\n"
            + "	sat_ifi_sipf.sipf_casos as t1\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t2 on\n"
            + "	t2.codigo = t1.id_gerencia\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 on\n"
            + "	t3.codigo = t1.id_departamento\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t5 on\n"
            + "	t5.codigo = t1.id_estado\n"
            + "join sat_ifi_sipf.sipf_insumo as t6 on\n"
            + "	t6.id_insumo = t1.id_insumo \n"
            + "where\n"
            + "	t1.id_insumo =:pIdInput", nativeQuery = true)
    List<CasoProjection> findByIdInsumo(@Param("pIdInput") Integer pIdInput);

    @Query(value = "select\n"
            + "	t1.id_caso as idCaso,\n"
            + "	t1.nit_contribuyente as nitContribuyente,\n"
            + "	t1.id_gerencia as idGerencia,\n"
            + "	t2.nombre as nombreGerencia,\n"
            + "	t1.id_estado as idEstado,\n"
            + "	t5.nombre as nombreEstado,\n"
            + "	t1.monto_recaudado as montoRecaudo,\n"
            + "	t1.id_departamento as idTipoAlcance,\n"
            + "	t3.nombre as nombreDepartamento,\n"
            + "	t1.id_impuesto as idImpuesto,\n"
            + "	t4.nombre as nombreImpuesto,\n"
            + "	t1.periodo_revision_inicio as periodoRevisionInicio,\n"
            + "	t1.periodo_revision_fin as periodoRevisionFin\n"
            + "	\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_casos as t1\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t2 on\n"
            + "	t2.codigo = t1.id_gerencia\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 on\n"
            + "	t3.codigo = t1.id_departamento\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t4 on\n"
            + "	t4.codigo = t1.id_impuesto\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t5 on\n"
            + "	t5.codigo =t1.id_estado \n"
            + "where\n"
            + "	t1.id_estado =:pIdStatur or t1.id_estado =17  ", nativeQuery = true)
    List<CasoProjection> findByAllAndIdEstado(@Param("pIdStatur") Integer pIdStatur);

    @Query(value = "	select\n"
            + "	t1.id_caso as idCaso,\n"
            + "	t1.nit_contribuyente as nitContribuyente,\n"
            + "	coalesce (\n"
            + "		(select rcj.razon_social as contribuyente\n"
            + "		from sat_rtu.sat_rtu.rtu_contrib_juridico rcj\n"
            + "		where rcj.nit = t1.nit_contribuyente),\n"
            + "		(select concat_ws(' ',\n"
            + "		rci.primer_nombre,\n"
            + "		rci.segundo_nombre,\n"
            + "		rci.tercer_nombre,\n"
            + "		rci.primer_apellido,\n"
            + "		rci.segundo_apellido,\n"
            + "		'DE ' || rci.apellido_casada) as contribuyente\n"
            + "		from sat_rtu.sat_rtu.rtu_contrib_individual rci\n"
            + "		where rci.nit = t1.nit_contribuyente)\n"
            + "	) as nombreContribuyente,\n"
            + "	t1.id_gerencia as idGerencia,\n"
            + "	t2.nombre as nombreGerencia,\n"
            + "	t1.id_estado as idEstado,\n"
            + "	t5.nombre as nombreEstado,\n"
            + "	t1.monto_recaudado as montoRecaudo,\n"
            + "	t1.id_insumo as idInsumo,\n"
            + "	t1.id_departamento as idTipoAlcance,\n"
            + "	t3.nombre as nombreDepartamento,\n"
            + "	cast((\n"
            + "	select array_to_json(array_agg(row_to_json(so))) from \n"
            + "	(\n"
            + "	select scd.nombre nombreImpuesto,\n"
            + "	sic.id_impuesto idImpuesto\n"
            + "	from sat_ifi_sipf.sipf_casos sc \n"
            + "	inner join sat_ifi_sipf.sipf_impuesto_caso sic\n"
            + "	on sic.id_caso = sc.id_caso \n"
            + "	inner join sat_ifi_sipf.sipf_cat_dato scd \n"
            + "	on scd.codigo = sic.id_impuesto \n"
            + "	where sc.id_caso = t1.id_caso\n"
            + "	)\n"
            + "	so\n"
            + " 	) as varchar) as impuestos,\n"
            + "	t1.periodo_revision_inicio as periodoRevisionInicio,\n"
            + "	t1.periodo_revision_fin as periodoRevisionFin,\n"
            + "	t6.nombre_insumo as nombreInsumo\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_casos as t1\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t2 on\n"
            + "	t2.codigo = t1.id_gerencia\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 on\n"
            + "	t3.codigo = t1.id_departamento\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t5 on\n"
            + "	t5.codigo =t1.id_estado\n"
            + "join sat_ifi_sipf.sipf_insumo as t6 on\n"
            + "	t6.id_insumo = t1.id_insumo\n"
            + "order by\n"
            + "t1.id_caso desc ", nativeQuery = true)
    List<CasoProjection> findByAll();

    @Query(value = "select\n"
            + "	t1.id_caso as idCaso,\n"
            + "	t1.nit_contribuyente as nitContribuyente,\n"
            + "	coalesce (\n"
            + "		(select rcj.razon_social as contribuyente\n"
            + "		from sat_rtu.sat_rtu.rtu_contrib_juridico rcj\n"
            + "		where rcj.nit = t1.nit_contribuyente),\n"
            + "		(select concat_ws(' ',\n"
            + "		rci.primer_nombre,\n"
            + "		rci.segundo_nombre,\n"
            + "		rci.tercer_nombre,\n"
            + "		rci.primer_apellido,\n"
            + "		rci.segundo_apellido,\n"
            + "		'DE ' || rci.apellido_casada) as contribuyente\n"
            + "		from sat_rtu.sat_rtu.rtu_contrib_individual rci\n"
            + "		where rci.nit = t1.nit_contribuyente)\n"
            + "	) as nombreContribuyente,\n"
            + "	t1.id_gerencia as idGerencia,\n"
            + "	t2.nombre as nombreGerencia,\n"
            + "	t1.id_estado as idEstado,\n"
            + "	t5.nombre as nombreEstado,\n"
            + "	t1.monto_recaudado as montoRecaudo,\n"
            + "	t1.id_departamento as idTipoAlcance,\n"
            + "	t3.nombre as nombreDepartamento,\n"
            + "	cast((\n"
            + "	select array_to_json(array_agg(row_to_json(so))) from \n"
            + "	(\n"
            + "	select scd.nombre nombreImpuesto,\n"
            + "	sic.id_impuesto idImpuesto\n"
            + "	from sat_ifi_sipf.sipf_casos sc \n"
            + "	inner join sat_ifi_sipf.sipf_impuesto_caso sic\n"
            + "	on sic.id_caso = sc.id_caso \n"
            + "	inner join sat_ifi_sipf.sipf_cat_dato scd \n"
            + "	on scd.codigo = sic.id_impuesto \n"
            + "	where sc.id_caso = t1.id_caso\n"
            + "	)\n"
            + "	so\n"
            + " 	) as varchar) as impuestos,\n"
            + "	t1.periodo_revision_inicio as periodoRevisionInicio,\n"
            + "	t1.periodo_revision_fin as periodoRevisionFin,\n"
            + " t6.nombre_insumo as nombreInsumo\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_casos as t1\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t2 on\n"
            + "	t2.codigo = t1.id_gerencia\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 on\n"
            + "	t3.codigo = t1.id_departamento\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t5 on\n"
            + "	t5.codigo =t1.id_estado \n"
            + "join sat_ifi_sipf.sipf_insumo as t6 on\n"
            + "	t6.id_insumo = t1.id_insumo \n"
            + "where\n"
            + "	t1.id_estado =:pIdStatur and t1.id_insumo =:pIdInput", nativeQuery = true)
    List<CasoProjection> findByIdInsumoAndIdEstadoAndIdFichaTecnica(@Param("pIdInput") Integer pIdInput,
            @Param("pIdStatur") Integer pIdStatur);

    @Query(value = "select\n"
            + "	t1.id_caso as idCaso,\n"
            + " t1.id_insumo as idInsumo,\n"
            + "	t1.nit_contribuyente as nitContribuyente,\n"
            + "	coalesce (\n"
            + "		(select rcj.razon_social as contribuyente\n"
            + "		from sat_rtu.sat_rtu.rtu_contrib_juridico rcj\n"
            + "		where rcj.nit = t1.nit_contribuyente),\n"
            + "		(select concat_ws(' ',\n"
            + "		rci.primer_nombre,\n"
            + "		rci.segundo_nombre,\n"
            + "		rci.tercer_nombre,\n"
            + "		rci.primer_apellido,\n"
            + "		rci.segundo_apellido,\n"
            + "		'DE ' || rci.apellido_casada) as contribuyente\n"
            + "		from sat_rtu.sat_rtu.rtu_contrib_individual rci\n"
            + "		where rci.nit = t1.nit_contribuyente)\n"
            + "	) as nombreContribuyente,\n"
            + "	t1.id_gerencia as idGerencia,\n"
            + "	t2.nombre as nombreGerencia,\n"
            + "	t1.id_estado as idEstado,\n"
            + "	t5.nombre as nombreEstado,\n"
            + "	t1.monto_recaudado as montoRecaudo,\n"
            + "	t1.id_departamento as idTipoAlcance,\n"
            + "	t3.nombre as nombreDepartamento,\n"
            + "	cast((\n"
            + "	select array_to_json(array_agg(row_to_json(so))) from \n"
            + "	(\n"
            + "	select scd.nombre nombreImpuesto,\n"
            + "	sic.id_impuesto idImpuesto\n"
            + "	from sat_ifi_sipf.sipf_casos sc \n"
            + "	inner join sat_ifi_sipf.sipf_impuesto_caso sic\n"
            + "	on sic.id_caso = sc.id_caso \n"
            + "	inner join sat_ifi_sipf.sipf_cat_dato scd \n"
            + "	on scd.codigo = sic.id_impuesto \n"
            + "	where sc.id_caso = t1.id_caso\n"
            + "	)\n"
            + "	so\n"
            + " 	) as varchar) as impuestos,\n"
            + "	t1.periodo_revision_inicio as periodoRevisionInicio,\n"
            + "	t1.periodo_revision_fin as periodoRevisionFin,\n"
            + "	t6.nombre_insumo as nombreInsumo\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_casos as t1\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t2 on\n"
            + "	t2.codigo = t1.id_gerencia\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 on\n"
            + "	t3.codigo = t1.id_departamento\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t5 on\n"
            + "	t5.codigo =t1.id_estado \n"
            + "join sat_ifi_sipf.sipf_insumo as t6 on\n"
            + "	t6.id_insumo = t1.id_insumo \n"
            + "where\n"
            + "	t1.id_estado =178", nativeQuery = true)
    List<CasoProjection> findByAllAndIdEstadoAndIdFichaTecnica();

    @Query(value = "select \n"
            + "     t1.id_gerencia as idGerencia,\n"
            + "     t3.nombre as Gerencia,\n"
            + "     t1.id_caso as idCaso,\n"
            + "     t1.nit_contribuyente as nitContribuyente,\n"
            + "     t2.nombre_insumo as nombreInsumo,\n"
            + "     t1.id_programa as idPrograma,\n"
            + "     t4.anio as periodo,\n"
            + "     t4.impuesto_nombres as nombreImpuesto\n"
            + "     from \n"
            + "     sat_ifi_sipf.sipf_casos as t1\n"
            + "     inner join sat_ifi_sipf.sipf_insumo as t2\n"
            + "     on t2.id_insumo =t1.id_insumo \n"
            + "     inner join sat_ifi_sipf.sipf_cat_dato as t3\n"
            + "     on t3.codigo =t1.id_gerencia\n"
            + "	    inner join sat_ifi_sipf.sipf_programa_fiscales as t4\n"
            + "	    on t4.id_programa=t1.id_programa\n"
            + "     where t1.id_estado = 133", nativeQuery = true)
    List<WalletAppointments> walletCasesFinal();

    @Query(value = "select\n"
            + "	t1.id_caso as idCaso,\n"
            + "	t1.id_proceso as idProceso,\n"
            + "	t1.id_gerencia as idGerencia,\n"
            + "	t1.nit_contribuyente as nitContribuyente,\n"
            + "	t1.id_programa as idPrograma,\n"
            + "	t1.monto_recaudado as montoRecaudado,\n"
            + "	t2.nombre as nombreGerencia\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_casos as t1\n"
            + "inner join sat_ifi_sipf.sipf_cat_dato as t2\n"
            + "on t2.codigo =t1.id_gerencia\n"
            + "where\n"
            + "	t1.id_estado = 133\n"
            + "	and t1.id_insumo =:idInsumo", nativeQuery = true)
    List<DetailWalletAppoint> detailWalletAppointments(@Param("idInsumo") Integer idInsumo);

    @Query(value = "select\n"
            + "	t1.nit_contribuyente as nitContribuyente,\n"
            + "	coalesce (\n"
            + "		(select rcj.razon_social as contribuyente\n"
            + "		from sat_rtu.sat_rtu.rtu_contrib_juridico rcj\n"
            + "		where rcj.nit = t1.nit_contribuyente),\n"
            + "		(select concat_ws(' ',\n"
            + "		rci.primer_nombre,\n"
            + "		rci.segundo_nombre,\n"
            + "		rci.tercer_nombre,\n"
            + "		rci.primer_apellido,\n"
            + "		rci.segundo_apellido,\n"
            + "		'DE ' || rci.apellido_casada) as contribuyente\n"
            + "		from sat_rtu.sat_rtu.rtu_contrib_individual rci\n"
            + "		where rci.nit = t1.nit_contribuyente)\n"
            + "	) as nombreContribuyente,\n"
            + "	t1.monto_recaudado as montoRecaudado,\n"
            + "	t1.periodo_revision_inicio as periodoInicio,\n"
            + "	t1.periodo_revision_fin as periodoFin,\n"
            + "	cast((\n"
            + "	select array_to_json(array_agg(row_to_json(so))) from \n"
            + "	(\n"
            + "	select scd.nombre nombreImpuesto,\n"
            + "	sic.id_impuesto idImpuesto\n"
            + "	from sat_ifi_sipf.sipf_casos sc \n"
            + "	inner join sat_ifi_sipf.sipf_impuesto_caso sic\n"
            + "	on sic.id_caso = sc.id_caso \n"
            + "	inner join sat_ifi_sipf.sipf_cat_dato scd \n"
            + "	on scd.codigo = sic.id_impuesto \n"
            + "	where sc.id_caso = t1.id_caso\n"
            + "	)\n"
            + "	so\n"
            + " 	) as varchar) as impuestos,\n"
            + "	t1.id_caso as idCaso,\n"
            + "	t5.nit_colaborador as nitProfesionalResponsable,\n"
            + "	t1.id_origen as idOrigen,\n"
            + "	t6.nombre as nombreOrigen,\n"
            + "	t3.nombre as nombreEstado,\n"
            + "	t7.nombre as nombreGerencia,\n"
            + "	t1.id_estado as idEstado,\n"
            + "	t1.id_proceso as processId,\n"
            + "	t1.usuario_modifica as usuarioElaboro,\n"
            + "	t1.id_programa as noPrograma\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_casos as t1\n"
            + "inner join sat_ifi_sipf.sipf_cat_dato as t3 on\n"
            + "	t1.id_estado = t3.codigo\n"
            + "inner join sat_ifi_sipf.sipf_cat_dato as t7 on\n"
            + "	t1.id_gerencia = t7.codigo\n"
            + "inner join sat_ifi_sipf.sipf_asignacion_casos as t5 on\n"
            + "	t5.id_caso = t1.id_caso\n"
            + "left join sat_ifi_sipf.sipf_cat_dato as t6 on\n"
            + "	t6.codigo = t1.id_origen\n"
            + "where\n"
            + "	t1.id_estado in(:states)\n"
            + " ORDER BY t1.id_caso DESC", nativeQuery = true)
    List<CarteraCasosProjection> casesByStates(@Param("states") List<Integer> states);

    @Query(value = "select\n"
            + "	t1.id_alcance as idAlcance,\n"
            + "	t1.id_tipo_alcance as tipoAlcance,\n"
            + "	t2.nombre as nombreTipoAlcance,\n"
            + "	t1.id_estado as estado,\n"
            + "	t6.nombre as nombreEstado,\n"
            + "	t3.id_caso as idCaso,\n"
            + " t4.id_formulario as idFormulario,\n"
            + " t5.correlativo as idDenuncia\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_alcance as t1\n"
            + "inner join sat_ifi_sipf.sipf_cat_dato as t2 on\n"
            + "	t2.codigo = t1.id_tipo_alcance\n"
            + "left join sat_ifi_sipf.sipf_detalle_caso as t3 on\n"
            + "	t3.id_alcance = t1.id_alcance\n"
            + "left join sat_ifi_sipf.sipf_presencias_fiscales as t4 on\n"
            + "	t4.id_alcance = t1.id_alcance\n"
            + "left join sat_ifi_sipf.sipf_denuncia_grabada as t5 on\n"
            + "	t5.id_alcance = t1.id_alcance\n"
            + "inner join sat_ifi_sipf.sipf_cat_dato as t6 on\n"
            + "	t6.codigo = t1.id_estado \n"
            + "where\n"
            + "	t1.id_estado =133 \n"
            + "ORDER BY t1.id_alcance DESC", nativeQuery = true)
    List<CarteraAllCasesProjection> casesByStatesAll();

    @Query(value = "select\n"
            + "	count(t1.id_caso)\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_casos as t1\n"
            + "where\n"
            + "	t1.id_insumo =:idInsumo\n"
            + "	and t1.id_estado =:idStatus", nativeQuery = true)
    Integer undocumentedCases(@Param("idInsumo") Integer idInsumo, @Param("idStatus") Integer idStatus);

    @Query(value = "select\n"
            + "	cs.id_caso as idCaso,\n"
            + " t8.id_alcance as idAlcance,\n"
            + "	cs.id_insumo as idInsumo,\n"
            + "	cs.id_estado as idEstado,\n"
            + "	cs.id_origen as idOrigen,\n"
            + "	cs.id_gerencia as idGerencia,\n"
            + "	cs.id_proceso as idProceso,\n"
            + "	t6.nombre_insumo as nombreCaso,\n"
            + "	t6.descripcion as descripcion,\n"
            + "	cs.monto_recaudado as montoRecaudado,\n"
            + "	cs.id_programa as idPrograma,\n"
            + "	cs.id_departamento as idTipoAlcance,\n"
            + "	cs.correlativo_aprobacion as correlativoAprobacion,\n"
            + "	cs.usuario_modifica as usuarioModifica,\n"
            + "	cs.fecha_modifica as fechaModifica,\n"
            + "	cs.ip_modifica as ipModifica,\n"
            + "	cs.periodo_revision_inicio as periodoRevisionInicio,\n"
            + "	cs.periodo_revision_fin as periodoRevisionFin,\n"
            + "	cs.nit_contribuyente as nitContribuyente,\n"
            + "	cd.id_entidad_solicitante as idEntidadSolicitante,\n"
            + "	cd.id_tipo_solicitud as idTipoSolicitud,\n"
            + "	cd.nombre_cuenta_auditar as nombreCuentaAuditar,\n"
            + "	cd.nit_contribuyente_cruce as nitContribuyenteCruce,\n"
            + "	cd.numero_factura_cruce as numeroFacturaCruce,\n"
            + "	cd.serie_factura_cruce as serieFacturaCruce,\n"
            + "	cd.fecha_factura_cruce as fechaFacturaCruce,\n"
            + "	cd.monto_factura_cruce as montoFacturaCruce,\n"
            + "	cd.fecha_solicitud as fechaSolicitud,\n"
            + "	cd.fecha_documento as fechaDocumento,\n"
            + "	cd.numero_documento as numeroDocumento,\n"
            + "	cd.plazo_entrega as plazoEntrega,\n"
            + "	cd.nombre_contacto as nombreContacto,\n"
            + "	cd.telefono_contacto as telefonoContacto,\n"
            + "	cd.correo_contacto as correoContacto,\n"
            + "	cd.detalle_entidad_solicitante as detalleEntidadSolicitante,\n"
            + "	cm.objetivo_caso_masiva as objetivoCasoMasiva,\n"
            + "	cm.territorio_masivo as territorioMasivo,\n"
            + "	ac.nit_colaborador as nitColaborador,\n"
            + "	cm.id_version_alcance as idVersionAlcance,\n"
            + "	t2.nombre as nombreGerencia,\n"
            + "	t5.nombre as nombreEstado,\n"
            + "	cast((\n"
            + "	select array_to_json(array_agg(row_to_json(so))) from \n"
            + "	(\n"
            + "	select scd.nombre nombreImpuesto,\n"
            + "	sic.id_impuesto idImpuesto\n"
            + "	from sat_ifi_sipf.sipf_casos sc \n"
            + "	inner join sat_ifi_sipf.sipf_impuesto_caso sic\n"
            + "	on sic.id_caso = sc.id_caso \n"
            + "	inner join sat_ifi_sipf.sipf_cat_dato scd \n"
            + "	on scd.codigo = sic.id_impuesto \n"
            + "	where sc.id_caso = cs.id_caso\n"
            + "	)\n"
            + "	so\n"
            + " ) as varchar) as impuestos,\n"
            + "	t3.nombre as nombreDepartamento,\n"
            + "	t7.nombre as nombrePrograma\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_casos as cs\n"
            + "left join sat_ifi_sipf.sipf_casos_dependencias as cd on\n"
            + "	cs.id_caso = cd.id_caso\n"
            + "left join sat_ifi_sipf.sipf_casos_masivos as cm on\n"
            + "	cm.id_caso = cs.id_caso\n"
            + "left join sat_ifi_sipf.sipf_asignacion_casos as ac on\n"
            + "	ac.id_caso = cs.id_caso\n"
            + "	and ac.id_estado = 130\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t2 on\n"
            + "	t2.codigo = cs.id_gerencia\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 on\n"
            + "	t3.codigo = cs.id_departamento\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t5 on\n"
            + "	t5.codigo = cs.id_estado\n"
            + "join sat_ifi_sipf.sipf_insumo as t6 on\n"
            + "	t6.id_insumo = cs.id_insumo\n"
            + "left join sat_ifi_sipf.sipf_programa_fiscales as t7 on\n"
            + "	t7.id_programa = cs.id_programa\n"
            + "join sat_ifi_sipf.sipf_detalle_caso as t8 on\n"
            + "t8.id_caso=cs.id_caso\n"
            + "where\n"
            + "	cs.id_caso = :idCaso", nativeQuery = true)
    CasosProjection findByIdCaseForFixedPoint(@Param("idCaso") Integer idCaso);

    @Query(value = "        select \n"
            + "        scd2 .codigo ,\n"
            + "        scd2 .nombre \n"
            + "        from sat_ifi_sipf.sipf_cat_dato scd2 \n"
            + "        where scd2.codigo != 960 and scd2.codigo_catalogo = 83", nativeQuery = true)
    List<ProcesosMasivosProjections> getProcesMasive();

    @Query(value = "select\n"
            + "	t1.id_caso as IdCaso,\n"
            + "	t1.id_estado as IdEstado,\n"
            + "	t2.id_alcance as IdAlcance,\n"
            + "	t3.nit_colaborador as NitColaborador,\n"
            + "	t4.nombres as NombreColaborador,\n"
            + "	t1.usuario_modifica as UsuarioModifica,\n"
            + "	t5.nombres as NombreUsuarioModifica\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_casos as t1\n"
            + "inner join sat_ifi_sipf.sipf_detalle_caso as t2 on\n"
            + "	t2.id_caso = t1.id_caso\n"
            + "inner join sat_ifi_sipf.sipf_asignacion_casos as t3 on\n"
            + "	t3.id_caso = t1.id_caso\n"
            + "	and (t3.id_estado = 15\n"
            + "		or t3.id_estado = 138)\n"
            + "inner join sat_ifi_sipf.sipf_colaborador as t4 on\n"
            + "	t4.nit = t3.nit_colaborador\n"
            + "inner join sat_ifi_sipf.sipf_colaborador as t5 on\n"
            + "	t5.login = t1.usuario_modifica\n"
            + "where\n"
            + "	t1.id_caso = :idCaso ", nativeQuery = true)
    List<ResponsableCasosProjection> getDataResponsible(@Param("idCaso") Integer idCaso);
}
