/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gt.gob.sat.sat_ifi_sipf.repositories;

import gt.gob.sat.sat_ifi_sipf.models.SipfInsumo;
import gt.gob.sat.sat_ifi_sipf.projections.InsumoProjecionStatus;
import gt.gob.sat.sat_ifi_sipf.projections.InsumoProjection;
import java.util.List;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;

/**
 *
 * @author crramosl
 */
public interface InsumoRepository extends CrudRepository<SipfInsumo, Integer> {

    @Query(value = "select \n"
            + "	t1.id_insumo as idInsumo,\n"
            + "	t1.nombre_insumo as nombreInsumo, \n"
            + "	t1.id_gerencia as idGerencia,\n"
            + "	t1.id_estado as idEstado,\n"
            + "	(select sum(monto_recaudado) from sat_ifi_sipf.sipf_casos where id_insumo = t1.id_insumo) as montoRecaudo,\n"
            + "	t1.id_departamento as idDepartamento, \n"
            + "	t1.id_tipo_insumo as idTipoInsumo, \n"
            + "	(select count(*) from sat_ifi_sipf.sipf_casos where id_insumo = t1.id_insumo) as cantidadCasos, \n"
            + "	t1.descripcion as descripcion, \n"
            + " t1.id_proceso as idProceso \n"
            + "from sat_ifi_sipf.sipf_insumo as t1 \n"
            /* + "join sat_ifi_sipf.sipf_cat_dato as t2 \n"
            + "on  t2.codigo =t1.id_gerencia \n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 \n"
            + "on t3.codigo =t1.id_departamento \n"
            + "join sat_ifi_sipf.sipf_cat_dato as t4 \n"
            + "on t4.codigo =t1.id_impuesto \n"*/
            + "where t1.id_insumo = :id", nativeQuery = true)
    InsumoProjection findByIdInsumo(@Param("id") Integer pIdInsumo);

    @Query(value = "select \n"
            + "	t1.id_insumo as idInsumo,\n"
            + "	t1.nombre_insumo as nombreInsumo, \n"
            + "	t1.id_gerencia as idGerencia,\n"
            + "	t1.id_estado as idEstado,\n"
            + "	(select sum(monto_recaudado) from sat_ifi_sipf.sipf_casos where id_insumo = t1.id_insumo) as montoRecaudo,\n"
            + "	t1.id_departamento as idDepartamento, \n"
            + "	t1.id_tipo_insumo  as idTipoInsumo, \n"
            + "	(select count(*) from sat_ifi_sipf.sipf_casos where id_insumo = t1.id_insumo) as cantidadCasos, \n"
            + "	t1.descripcion as descripcion \n"
            + "from sat_ifi_sipf.sipf_insumo as t1 \n"
            + "join sat_ifi_sipf.sipf_cat_dato as t2 \n"
            + "on  t2.codigo =t1.id_gerencia \n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 \n"
            + "on t3.codigo =t1.id_departamento \n"
            //+ "join sat_ifi_sipf.sipf_cat_dato as t4 \n"
            //+ "on t4.codigo =t1.id_impuesto \n"
            + "where t1.nit_encargado = :nit", nativeQuery = true)
    List<InsumoProjection> findByNitEncargado(@Param("nit") String pNitEncargado);

    @Query(value = "select\n"
            + "	distinct \n"
            + "	t1.id_insumo as idInsumo,\n"
            + "	sc.login || ' - ' || sc.nombres as usuarioPublica,\n"
            + "	sibce.fecha_modifica as fechaPublica,\n"
            + "	t1.nombre_insumo as nombreInsumo,\n"
            + "	t1.id_gerencia as idGerencia,\n"
            + "	t2.nombre as nombreGerencia,\n"
            + "	t1.id_estado as idEstado,\n"
            + "	t4.nombre as nombreEstado,\n"
            + "	(\n"
            + "	select\n"
            + "		sum(monto_recaudado)\n"
            + "	from\n"
            + "		sat_ifi_sipf.sipf_casos\n"
            + "	where\n"
            + "		id_insumo = t1.id_insumo) as montoRecaudo,\n"
            + "	t1.id_departamento as idDepartamento,\n"
            + "	t3.nombre as nombreDepartamento,\n"
            + "	(\n"
            + "	select\n"
            + "		count(*)\n"
            + "	from\n"
            + "		sat_ifi_sipf.sipf_casos\n"
            + "	where\n"
            + "		id_insumo = t1.id_insumo) as cantidadCasos,\n"
            + "	(\n"
            + "	select\n"
            + "		count(*)\n"
            + "	from\n"
            + "		sat_ifi_sipf.sipf_casos\n"
            + "	where\n"
            + "		id_insumo = t1.id_insumo\n"
            + "		and id_estado = 177) as cantidadCasosAsingar,\n"
            + "	t1.descripcion as descripcion\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_insumo as t1\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t2 \n"
            + "on\n"
            + "	t2.codigo = t1.id_gerencia\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 \n"
            + "on\n"
            + "	t3.codigo = t1.id_departamento\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t4 \n"
            + "on\n"
            + "	t4.codigo = t1.id_estado\n"
            + "join sat_ifi_sipf.sipf_integrante_grupo as t5\n"
            + "on\n"
            + "	t5.nit =:pNit\n"
            + "join sat_ifi_sipf.sipf_grupo_trabajo t6\n"
            + "on\n"
            + "	t5.id_grupo = t6.id\n"
            + "left join sat_ifi_sipf.sipf_insumo_bitacora_cambio_estado sibce \n"
            + "on\n"
            + "	sibce.id_insumo = t1.id_insumo\n"
            + "	and sibce.id = (\n"
            + "	select\n"
            + "		max(sibce2.id)\n"
            + "	from\n"
            + "		sat_ifi_sipf.sipf_insumo_bitacora_cambio_estado sibce2\n"
            + "	where\n"
            + "		sibce2.id_insumo = t1.id_insumo\n"
            + "		and sibce2.id_estado_nuevo = 177 )\n"
            + "left join sat_ifi_sipf.sipf_colaborador sc on\n"
            + "	sc.nit = sibce.usuario_modifica\n"
            + "where\n"
            + "	(t1.id_estado in (:pIdEstado)\n"
            + "		or (t1.id_estado = 439\n"
            + "			and t1.id_estado_anterior in (:pIdEstado) ))\n"
            + "	and t1.id_unidad_administrativa = t6.id_gerencia\n"
            + "	and t6.id_estado = 163\n"
            + "	and t5.id_perfil in (12, 4) ", nativeQuery = true)
    List<InsumoProjecionStatus> findByStatusApprover(@Param("pIdEstado") List<Integer> estados, @Param("pNit") String pNit);

    @Query(value = "select\n"
            + "	distinct \n"
            + "	t1.id_insumo as idInsumo,\n"
            + "	sc.login || ' - ' || sc.nombres as usuarioPublica,\n"
            + "	sibce.fecha_modifica as fechaPublica,\n"
            + "	t1.nombre_insumo as nombreInsumo,\n"
            + "	t1.id_gerencia as idGerencia,\n"
            + "	t2.nombre as nombreGerencia,\n"
            + "	t1.id_estado as idEstado,\n"
            + "	t4.nombre as nombreEstado,\n"
            + "	(\n"
            + "	select\n"
            + "		sum(monto_recaudado)\n"
            + "	from\n"
            + "		sat_ifi_sipf.sipf_casos\n"
            + "	where\n"
            + "		id_insumo = t1.id_insumo) as montoRecaudo,\n"
            + "	t1.id_departamento as idDepartamento,\n"
            + "	t3.nombre as nombreDepartamento,\n"
            + "	(\n"
            + "	select\n"
            + "		count(*)\n"
            + "	from\n"
            + "		sat_ifi_sipf.sipf_casos\n"
            + "	where\n"
            + "		id_insumo = t1.id_insumo) as cantidadCasos,\n"
            + "	t1.descripcion as descripcion,\n"
            + "	(\n"
            + "	select\n"
            + "		max(shc.comentarios)\n"
            + "	from\n"
            + "		sat_ifi_sipf.sipf_historial_comentarios shc\n"
            + "	where\n"
            + "		shc.id_tipo_comentario = 191\n"
            + "		and cast(t1.id_insumo as text) = shc.id_registro) as \"comentarioSuspender\"\n"
            + "from\n"
            + "	sat_ifi_sipf.sipf_insumo as t1\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t2 \n"
            + "on\n"
            + "	t2.codigo = t1.id_gerencia\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 \n"
            + "on\n"
            + "	t3.codigo = t1.id_departamento\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t4 \n"
            + "on\n"
            + "	t4.codigo = t1.id_estado\n"
            + "join sat_ifi_sipf.sipf_colaborador_perfil as t5\n"
            + "on\n"
            + "	t5.nit =:pNit\n"
            + "join sat_ifi_sipf.sipf_perfil_departamento as t6\n"
            + "on\n"
            + "	t6.id_perfil = t5.id_perfil\n"
            + "left join sat_ifi_sipf.sipf_insumo_bitacora_cambio_estado sibce \n"
            + "on\n"
            + "	sibce.id_insumo = t1.id_insumo\n"
            + "	and sibce.id = (\n"
            + "	select\n"
            + "		max(sibce2.id)\n"
            + "	from\n"
            + "		sat_ifi_sipf.sipf_insumo_bitacora_cambio_estado sibce2\n"
            + "	where\n"
            + "		sibce2.id_insumo = t1.id_insumo\n"
            + "		and sibce2.id_estado_nuevo = 177 )\n"
            + "left join sat_ifi_sipf.sipf_colaborador sc on\n"
            + "	sc.nit = sibce.usuario_modifica\n"
            + "where\n"
            + "	(t1.id_estado in (:pIdEstado)\n"
            + "		or (t1.id_estado = 439\n"
            + "			and t1.id_estado_anterior in (:pIdEstado) ))\n"
            + "	and t1.id_departamento in (t6.id_departamento)\n"
            + "	and t5.estado = 161", nativeQuery = true)
    List<InsumoProjecionStatus> findByStatusAuthorizer(@Param("pIdEstado") List<Integer> estados, @Param("pNit") String pNit);

    @Query(value = "select distinct \n"
            + "	t1.id_insumo as idInsumo,\n"
            + "	cast (t1.fecha_publicacion as DATE)as fechaPublicacion,\n"
            + "	t1.nombre_insumo as nombreInsumo, \n"
            + "	t1.id_gerencia as idGerencia,\n"
            + "	t2.nombre as nombreGerencia,\n"
            + "	t1.id_estado as idEstado,\n"
            + "	t4.nombre as nombreEstado,\n"
            + "	(select sum(monto_recaudado) from sat_ifi_sipf.sipf_casos where id_insumo = t1.id_insumo) as montoRecaudo,\n"
            + "	t1.id_departamento as idDepartamento, \n"
            + "	t3.nombre as nombreDepartamento,\n"
            + "	(select count(*) from sat_ifi_sipf.sipf_casos where id_insumo = t1.id_insumo) as cantidadCasos, \n"
            + "	t1.descripcion as descripcion \n"
            + "from sat_ifi_sipf.sipf_insumo as t1 \n"
            + "join sat_ifi_sipf.sipf_cat_dato as t2 \n"
            + "on  t2.codigo =t1.id_gerencia \n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 \n"
            + "on t3.codigo =t1.id_departamento\n"
            + "join sat_ifi_sipf.sipf_cat_dato as t4 \n"
            + "on  t4.codigo = t1.id_estado\n"
            + "where t1.id_estado in (:pIdEstado)\n"
            + "order by\n"
            + "t1.id_insumo desc", nativeQuery = true)
    List<InsumoProjecionStatus> findByStatus(@Param("pIdEstado") List<Integer> estados);

    @Query(value = "select \n"
            + "	t1.id_insumo as idInsumo,\n"
            + "	t1.nombre_insumo as nombreInsumo, \n"
            + "	t1.id_gerencia as idGerencia,\n"
            + "	t2.nombre as nombreGerencia,\n"
            + "	t1.id_estado as idEstado,\n"
            + " (select sum(t6.monto_recaudado) from 	sat_ifi_sipf.sipf_casos as t6 \n"
            + " where t6.id_insumo = t1.id_insumo ) as montoRecaudo, \n"
            + " t1.nit_encargado as nitEncargado, \n"
            + "	t1.id_departamento as idDepartamento, \n"
            + "	t3.nombre as nombreDepartamento, \n"
            + "	t1.id_tipo_insumo as idTipoInsumo, \n"
            //+ "	t4.nombre as nombreImpuesto, \n"
            + " (select count(*) from 	sat_ifi_sipf.sipf_casos as t6 \n"
            + " where t6.id_insumo = t1.id_insumo ) as cantidadCasos, \n"
            + " t1.descripcion as descripcion, \n"
            + " t5.nombre as nombreEstado \n"
            + "from sat_ifi_sipf.sipf_insumo as t1 \n"
            + "join sat_ifi_sipf.sipf_cat_dato as t2 \n"
            + "on  t2.codigo =t1.id_gerencia \n"
            + "join sat_ifi_sipf.sipf_cat_dato as t3 \n"
            + "on t3.codigo =t1.id_departamento \n"
            //+ "join sat_ifi_sipf.sipf_cat_dato as t4 \n"
            //+ "on t4.codigo =t1.id_impuesto \n"
            + "join sat_ifi_sipf.sipf_cat_dato as t5 \n"
            + "on t5.codigo =t1.id_estado \n"
            + "where t1.id_insumo=:pIdInsumo", nativeQuery = true)
    InsumoProjecionStatus findByIdInsumobyCometario(@Param("pIdInsumo") Integer pIdInsumo);
}
